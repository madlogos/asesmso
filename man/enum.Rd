% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{enum}
\alias{enum}
\title{Get enumeration value(s) based on the enum name(s)}
\usage{
enum(enum_name, ..., family = NULL, unlist = TRUE, bare = FALSE)
}
\arguments{
\item{enum_name}{vector, can be \describe{
\item{scalar character}{e.g., "msoChart". In this case, you can pass other characters
in \code{...}}
\item{vector character}{e.g, c("msoChart", "msoTable") or list("msoChart", 
"msoTable"). In this case, \code{...} is omitted.}
\item{scalar symbol}{e.g., msoChart. In this case, you can pass other symbols
in \code{...}}
\item{vector symbol}{e.g, c(msoChart, msoTable) or list(msoChart, 
msoTable). In this case, \code{...} is omitted.}
}}

\item{...}{When \code{enum_name} is scalar, you can pass the rest of the enum_names
here.}

\item{family}{character vector of the enumeration families, e.g., "MsoFileType".
You can use \code{names(ENUM)} to check the full list. When it is defined, the
function will only search enumerations within the families specified. Default NULL,
i.e. the function will search the whole ENUM data set. You can only input the
initial letters of the families.}

\item{unlist}{logical, whether unlist the result. Default TRUE.}

\item{bare}{logical, whether only return bare enumeration numbers. Default FALSE.}
}
\value{
\describe{
\item{If \code{unlist} = TRUE}{return a vector, with a vector of 'family' attribute 
on the vector (of same length as the result)}
\item{If \code{unlist} = FALSE}{return a list, with a 'family' attribute on each element}
\item{If \code{enum_name} is NULL or NA}{return all the enumerations that match}
\item{If nothing is found}{return NA}
}
}
\description{
There is a builtin ENUM data set storing enumerations that are quite handy when
applying mso-family functions.
}
\examples{
\dontrun{
enum(msoChart)  # equivalent to enum("msoChart")
# msoChart 
#        3 
# attr(,"family")
# [1] "msoShapeType"

enum(msoChart, unlist=FALSE)  # or enum("msoChart", unlist=FALSE)
# $`msoChart`
# [1] 3
# attr(,"family")
# [1] "msoShapeType"

enum(msoChart, msoTable)  # or enum(c(msoChart, msoTable))
                          # or enum(msoChart, family="Mso")
# msoChart   msoTable 
#        3         19 
# attr(,"family")
# [1] "msoShapeType" "msoShapeType"

enum(msoChart, family=c("Xl", "Wd"))  # "msoChart" not in these families
# [1] NA

enum(NULL, family="XlAxisGroup")  # return all the enums of "XlAxisGroup"
#   xlPrimary xlSecondary 
#           1           2 
# attr(,"family")
# [1] "XlAxisGroup" "XlAxisGroup"

enum(msoChart, bare=TRUE)  # only return bare number
# [1] 3

# feel free to use purrr::as_mapper
getEnum <- function(family, enum_name) {
    purrr:::as_mapper(c(family, enum_name))
}
getEnum("MsoShapeType", "msoChart")
# [1] 3
}
}
\seealso{
\code{\link{data:ENUM}}
}
\author{
Yiying Wang, \email{wangy@aetna.com}
}
